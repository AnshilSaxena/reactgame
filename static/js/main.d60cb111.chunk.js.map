{"version":3,"sources":["reportWebVitals.js","StarMatch.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StarsDisplay","props","utils","range","count","map","starId","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","Game","timeLimit","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","StarMatch","gameId","setGameId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d60cb111.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './StarMatch.css';\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst StarsDisplay = props => (\r\n    <>\r\n      {utils.range(1, props.count).map(starId => (\r\n        <div key={starId} className=\"star\" />\r\n      ))}\r\n    </>\r\n  );\r\n  \r\n  const PlayNumber = props => (\r\n    <button\r\n      className=\"number\"\r\n      style={{backgroundColor: colors[props.status]}}\r\n      onClick={() => props.onClick(props.number, props.status)}\r\n    >\r\n      {props.number}\r\n    </button>\r\n  );\r\n  \r\n  const PlayAgain = props => (\r\n      <div className=\"game-done\">\r\n        <div \r\n          className=\"message\"\r\n        style={{ color: props.gameStatus === 'lost' ? 'red' : 'green'}}\r\n      >\r\n          {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\r\n        </div>\r\n        <button onClick={props.onClick}>Play Again</button>\r\n      </div>\r\n  );\r\n  \r\n  const useGameState = timeLimit => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n  \r\n    useEffect(() => {\r\n      if (secondsLeft > 0 && availableNums.length > 0) {\r\n        const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\r\n        return () => clearTimeout(timerId);\r\n      }\r\n    });\r\n  \r\n    const setGameState = (newCandidateNums) => {\r\n      if (utils.sum(newCandidateNums) !== stars) {\r\n              setCandidateNums(newCandidateNums);\r\n      } else {\r\n        const newAvailableNums = availableNums.filter(\r\n          n => !newCandidateNums.includes(n)\r\n        );\r\n        setStars(utils.randomSumIn(newAvailableNums, 9));\r\n        setAvailableNums(newAvailableNums);\r\n        setCandidateNums([]);\r\n      }\r\n    };\r\n  \r\n    return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n  };\r\n  \r\n  const Game = props => {\r\n    const {\r\n      stars,\r\n      availableNums,\r\n      candidateNums,\r\n      secondsLeft,\r\n      setGameState,\r\n    } = useGameState();\r\n  \r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    const gameStatus = availableNums.length === 0 \r\n        ? 'won'\r\n      : secondsLeft === 0 ? 'lost' : 'active'\r\n  \r\n    const numberStatus = number => {\r\n      if (!availableNums.includes(number)) {\r\n        return 'used';\r\n      }\r\n  \r\n      if (candidateNums.includes(number)) {\r\n        return candidatesAreWrong ? 'wrong' : 'candidate';\r\n      }\r\n  \r\n      return 'available';\r\n    };\r\n  \r\n    const onNumberClick = (number, currentStatus) => {\r\n      if (currentStatus === 'used' || secondsLeft === 0) {\r\n        return;\r\n      }\r\n  \r\n      const newCandidateNums =\r\n        currentStatus === 'available'\r\n          ? candidateNums.concat(number)\r\n          : candidateNums.filter(cn => cn !== number);\r\n  \r\n      setGameState(newCandidateNums);\r\n    };\r\n  \r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"help\">\r\n          Pick 1 or more numbers that sum to the number of stars\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"left\">\r\n            {gameStatus !== 'active' ? (\r\n                <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\r\n            ) : (\r\n                <StarsDisplay count={stars} />\r\n            )}\r\n          </div>\r\n          <div className=\"right\">\r\n            {utils.range(1, 9).map(number => (\r\n              <PlayNumber\r\n                key={number}\r\n                status={numberStatus(number)}\r\n                number={number}\r\n                onClick={onNumberClick}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const StarMatch = () => {\r\n      const [gameId, setGameId] = useState(1);\r\n      return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)}/>;\r\n  }\r\n  \r\n  // Color Theme\r\n  const colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n  \r\n  // Math science\r\n  const utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\n  \r\n  export default StarMatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport StarMatch from './StarMatch';\n\nReactDOM.render(\n  <>\n    <StarMatch />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}